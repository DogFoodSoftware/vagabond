# -*- mode: ruby -*-
# vi: set ft=ruby :

# /**
# * <div class="p">
# * See documentation on <a
# * href="/documentation/vagabond/dev/Understanding-Configuration-Resolution">understanding
# * confugiration resolution for the details of how the <a
# * href="/documentation/vagabond/dev/Environment-Runtime-Primer#Runtime-Configuration">machine
# * level configuration is bounded and interacts with the template defined
# * configuration.
# * </div>
# */
require "#{File.expand_path(File.dirname(__FILE__))}/machine-config.rb"

Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |v|
    v.customize ["modifyvm", :id, "--memory", "2048"]
  end
end

Vagrant.configure("1") do |config|
  # First, we check our required inputs
  if defined? $ip == nil
    raise 'Configuration variable must be defined by file \'machine_config.rb\' in same directory as this file before template may be executed.'
  end

  config.vm.box = "whitebox-opensuse-12_3x64-server"
  config.vm.box_url = "file:///home/user/vagabond/boxes/whitebox-opensuse-12_3x64-server.box"

  config.ssh.username = 'user'
  config.ssh.private_key_path = '/home/user/vagabond/secure_id_rsa'

  # Setup the network configuration; this requires stepping outside of the
  # native Vagrant config, which (oddly) does not support static IPs on a
  # bridged interface. Word is that this is coming in the future, but till
  # then...
  $static_ip = <<CONFIG
cat <<EOF > /etc/sysconfig/network/ifcfg-eth1
BOOTPROTO='static'
DEVICE='eth1'
IPADDR='#{$ip}'
STARTMODE='auto'
USERCONTROL='no'
EOF
cat <<EOF > /etc/sysconfig/network/routes
default 207.200.21.225 - eth1
EOF
/sbin/yast firewall interfaces add interface=eth1 zone=EXT
/etc/init.d/network restart
CONFIG
  config.vm.network :bridged, :bridge => "eth0", :auto_config => false
  config.vm.provision :shell, :inline => $static_ip

  # setup the DNS (named) server
  $sshd =<<SCRIPT
SuSEfirewall2 open EXT TCP ssh
SuSEfirewall2 open EXT UDP ssh
SuSEfirewall2 stop
SuSEfirewall2 start
SCRIPT
  config.vm.provision :shell, :inline => $sshd
end
