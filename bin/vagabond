#!/usr/bin/env php
<?php
# /**
# * <div id="Overview"class="blurbSummary grid_12">
# * <div class="p">
# * Vagabondn CLI client. We <span data-todo="Link to Conveyor CLI
# * once we have it written up.">have plans to replace this with a
# * general purpose CLI client that takes advantage of the <a
# * href="/documentation/kibbles/ref/Common-Interface-Standard#Command-Line-Support">commandline
# * support</a> within the <a
# * href="/documentation/kibbles/ref/Common-Interface-Standard">Conveyor
# * Common Interface Standard</a>. We have attempted to construct this
# * current special purpose processor so as to have a similar
# * structure and interface as we believe the common CLI will have,
# * however there are likely to be unsupported changes.
# * </div>
# * <div class="p">
# * The general form of the vagabond CLI command is: <pre><code>
# * vagabond <resource> <action> [<item ID>] [<name1>=<val1>...]
# * </code></pre> where '<code>resource</code>' may be:
# * <code>boxes</code>, <code>environment</code>, or
# * <code>template</code>. The resource names may be preceeded by
# * '<code>vagabond-</code>', which would actually be the canonical
# * name, the shorter versions being provided for user
# * convenience. The'<code>action</code>' may be
# * <code>POST|CREATE</code>, <code>GET</code>,
# * <code>PUT|UPDATE</code>, or <code>DELETE|REMOVE</code>. The
# * acceapted parameters are dependent on the other arguments and
# * defined with respect to each action.
# * </div>
# * </div><!-- .blurbSummary#Overview -->
# * <div id="Resource-Specification" class="blurbSummary grid_12">
# * <div class="p">
# * The Vagabond projet provides three resource:
# * <ul>
# * <li><code>v√•agabond-templates</code>: the univers<e of environment
# * templates.  Each temeplate consists of one or more machine
# * templates. A machine template is a high level (meta) description
# * of what a running machine instance would look like<span
# * data-perspective="coding detailed">; embodied in
# * <code>Vagabondfile</code></span>.</li>
# * <li><code>vagabond-environments</code>: the universe of runnable
# * environment configurations. Each environment configuration
# * consists of one or more machine configurations. Each machine
# * configuration is associated to a single virtual machine instance
# * (which may or may not be created or running).</li>
# * <li><code>vagabond-boxes</code>: the universe of canned virtual
# * machine images. An image is used<span data-perspective="coding
# * operations"> by the underlying Vagrant service</span> along with
# * an environment machine configuration<span data-perspective="coding
# * detailed"> (encoded within a <code>Vagrantfile</code>) </span> to
# * create each running virtual machine instance.</li>
# * </ul>
# * </div>
# * <div class="subHeader"><span><code>vagabond-templates</code></span></div>
# * <div class="p">
# * Each <code>vagabond-templates</code> item is composed of a set of
# * one or more <code>Vagabondfile</code>s and 0+ artifact files. Each
# * <code>Vagabondfile</code> and associated artificats are used to
# * create usable configurations within a
# * <code>vagrant-environments</code> item.
# * </div>
# * <div class="p">
# * Each environment template describes a single environment
# * type.<span data-perspective="coding"> The environment type is
# * analogous to an object class or object tempalte; the environment
# * instance corresponding with an object instance.</span> There is no
# * hard and fast rule how environments are to releate to running
# * machines. You could, for instance, use single environment for each
# * machine, or you could organize environmnts by department or other
# * high level abstraction, or use a single environment for your
# * entire operation. In practice we recommend most users refer to the
# * <a
# * href="/documentation/vagabon/ref/Environment-Design-Guidelines">Vagabond
# * Environment Design Guidelines</a>.
# * </div>
# * <div class="p">
# * Within an environment, machine-type templates may be organized
# * under any number of groupings (laid out on disk as
# * directories). Each directory may exclusively contain one or more
# * directories or a machine template file set. The environment root
# * directory may only contain directories.
# * </div>
# * <div class="p">
# * Templates are stored in a seperate directory as <a
# * href="/documentation/kibbles/lexicon/Static_Data">static data</a>.
# * Currently, Vagabond only supports the standard templates
# * distributed with the Vagabond distribution. The 1.0-GA release
# * will support loadable templates, allowing Vagabond to integrate
# * and be integrated with other projects.
#* </div>

# * <div class="subHeader"><span><code>vagabond-environments</code></span></div>
# * <div class="p">
# * Whereas a <code>vagabond-templates</code> item describes a
# * meta-environment, a <code>vagabond-environment</code> item relates to
# * a runnable environment. Environments exist as <a
# * href="/documentation/kibbles/lexicon/Runtime-Data</a>runtime
# * data</a>. Any given machine template (corresponding to a
# * <code>Vagabondfile</code>) from a <code>vagabond-templates</code>
# * item may be used to initiate zero or more machine instances in a
# * given <code>vagabond-environment</code> item.
# * </div>
# * <div class="subHeader"><span><code>vagabond-boxes</code></span></div>
# * <div class="p">
# *   A <code>vagabond-box</code> is a running virtual machine instance.
# * </div>
# * </div>
# * <div class="subHeader"><span><code>vagabond-images</code></span></div>
# * <div class="p">
# *   A <code>vagabond-image</code> is a base box image used to create a runtime
# *   <code>vagabond-box</code>
# * </div>
# * </div>
# * <div class="subHeader"><span><code>vagabond-snapshot</code></span></div>
# * <div class="p">
# *   A <code>vagabond-image</code> is a disk-snapshot of an enviornment
# *   runtime; a live backup.
# * </div>
# * </div>
# * </div><!-- .blurbSummary#Resource-Specification -->
# */

# Within environmonts, you can have any number of sub-environments. So, the
# environment cookbook might pull in a 'apache cloud' environment to provide
# self-scaling HTTP front end processing. Each vagabond-box is a minimal
# vagabond-envioronment

$STDERR = fopen('php://stderr', 'w+');

# Process parameters. Recall that '$argv[0]' is the script name.

if (count($argv) < 3) {
  frwite($STDERR, "Must provide at least resource and verb.");
}

array_shift($argv); # No need for the script name.
$RESOURCE = array_shift($argv);
$VERB = array_shift($argv);

$ID = null;
$PARAMETERS = array();

$first_chunk = true;
while (count($argv) > 0) {
  $chunk = array_shift($argv);

  $matches = array();
  if (!preg_match("/^(\w+)=(.+)$/", $chunk, $matches) && $first_chunk) {
    $ID = $chunk;
  }
  else {
    $PARAMETERS[$matches[1]] = $matches[2];
  }

  $first_chunk = false;
}

print "RESOURCE : $RESOURCE\nVERB : $VERB\nID : $ID\nPARAMETERS : ";
var_dump($PARAMETERS);

# Dispatch request based on $RESOURCE + $VERB.

switch ($RESOURCE) {
 case 'hosts':
   switch ($VERB) {
     case 'create':
       hosts_create(); break;
     default:
       fwrite($STDERR, "Unknown action '$ACTION'."); break;
   }
   break;
 default:
   fwrite($STDERR, "Unknown resource '$RESOURCE'."); break;
 }

# Dispatch functions.

function hosts_create() {
  global $STDERR, $PARAMETERS;

  $FROM = $PARAMETERS['from'];
  $TO = $PARAMETERS['to'];
  if (!isset($FROM)) {
    fwrite($STDERR, "Must specify 'from' parameter.\n");
    exit(1);
  }
  if (!isset($TO)) {
    fwrite($STDERR, "Must specify 'to' parameter.\n");
    exit(1);
  }

  # Set up local DB prefix.
  $TFER_DIR="_tfer_dir";

  # Okay, let's test $FROM and $TO. Each must be either an SSH URL or a local path.    
  if (substr($FROM, 0, 6) == "ssh://") {
    $from_cmd_prefix = "ssh -o 'PreferredAuthentications=publickey' ".substr($FROM, 6, strpos($FROM, "/", 7) - 6).' "';
    $from_cmd_postfix = '"';
    $from_path = substr($FROM, strpos($FROM, "/", 6));
  }
  else if (is_dir($FROM)) {
    $from_cmd_prefix = "";
    $from_cmd_postfix = "";
    $from_path = "$FROM";
  }
  else {
    fwrite($STDERR, "'from' parameter must be SSH URL ('ssh://...') or a local path. ($FROM)\n");
    exit(1);
  }

  if (substr($TO, 0, 6) == "ssh://") {
    $to_cmd_prefix = "ssh -o 'PreferredAuthentications=publickey' ".substr($TO, 6, strpos($TO, "/", 7) - 6).' "';
    $to_cmd_postfix = '"';
    $to_path = substr($TO, strpos($TO, "/", 6));
  }
  else if (is_dir(dirname($TO))) {
    $to_cmd_prefix = "";
    $to_cmd_postfix = "";
    $to_path = "$TO";
  }
  else {
    fwrite($STDERR, "'to' parameter must be SSH URL ('ssh://...') or a local path specifying new directory in existing directory. ($TO)\n");
    exit(1);
  }

  # TODO: Use standard lib and turn all these 'verbos echos into vechos (I think).
  print "FROM : $FROM\nfrom_cmd_prefix : $from_cmd_prefix\nfrom_path : $from_path\nTO : $TO\nto_cmd_prefix : $to_cmd_prefix\nto_path : $to_path";

  # Verify we can connect to any non-local sources.
  if ($from_cmd_prefix != "" && system("$from_cmd_prefix echo $from_cmd_postfix") === FALSE) {
    fwrite($STDERR, "Could establish SSH connection to source ($from_cmd_prefix); setup key-based authentication.\n");
    exit(1);
  }
  if ($to_cmd_prefix != "" && system("$to_cmd_prefix echo $from_cmd_postfix") === FALSE) {
    fwrite($STDERR, "Could establish SSH connection to target ($to_cmd_prefix); setup key-based authentication.\n");
    exit(1);
  }

  # Verify $from_path is valid export target.
  if (system("$from_cmd_prefix eval 'if [ -e $from_path ]; then echo TRUE; fi' $from_cmd_postfix") != 'TRUE') {
    fwrite($STDERR, "No source directory found at '$FROM'.\n");
    exit(1);
  }
  else if (system("$from_cmd_prefix eval 'if [ -f $from_path/Vagrantfile ]; then echo TRUE; fi' $from_cmd_postfix") != 'TRUE') {
    fwrite($STDERR, "No source 'Vagrantfile' found at '$FROM/Vagrantfile'.\n");
    exit(1);
  }
  else if (system("$from_cmd_prefix eval 'if [ -f $from_path/.vagrant/machines/default/virtualbox/id ]; then echo TRUE; fi' $from_cmd_postfix") != 'TRUE') {
    fwrite($STDERR, "No VirtualBox ID found (in '$FROM/.vagrant).\n");
    exit(1);
  }

  # Verify $to_path is free.
  if (system("$to_cmd_prefix eval 'if [ -e $to_path ]; then echo TRUE; fi' $to_cmd_postfix") == 'TRUE') {
    fwrite($STDERR, "File or directory blocks target location '$TO'.\n");
    exit(1);
  }


  # Finally, check to see that the source VM is not currently running.
  # TODO: Before going production, we need to do a file lock or something. We want exports to queue up with each other and backups. And later, to allow for configurable concurrent defaulting to per-physical host or something.
  $source_id = system("$from_cmd_prefix eval 'cd $from_path; cat .vagrant/machines/default/virtualbox/id' $from_cmd_postfix");
  if ($source_id === FALSE) {
    fwrite($STDERR, "Could not retrieve source VM ID.\n");
    exit(1);
  }

  $from_state = system("$from_cmd_prefix eval 'VBoxManage showvminfo $source_id | grep State:' $from_cmd_postfix");
  if (!preg_match("/powered off/", $from_state)) {
    fwrite($STDERR, "VM at '$FROM' is not shut down. Got:\n\t$from_state\n");
    exit(1);
  }
  print "source_id : $source_id\nfrom_state : $from_state\n";

  # Looks like the source is valid and the destination clear. Create prefixes for the SCP copy.
  $from_scp_prefix = $from_cmd_prefix == "" ? $from_cmd_prefix : $from_cmd_prefix.':';
  $to_scp_prefix = $to_cmd_prefix == "" ? $to_cmd_prefix : $to_cmd_prefix.':';
  print "from_scp_prefix : $from_scp_prefix\nto_scp_prefix : $to_scp_prefix\n";

  # Okay, everything checks out for transfer.

  # 1) Use ssh to issue command to the source host to export an OVF
  #    appliance file from the machine.
  # 2) Copy the source directory to the target direcotry. This is
  #   the vagrant working direcotry and has the OVF, the
  #   Vagrantfile, and possibly other host specific files.
  # 3) Import the OVM to create new VM on the target.
  # 4) Remove the OVF file from the source.
  # 5) Set add a '.vagrant' DB to set up the newly created VM as a
  #    vagrant box.

  $ovf_file = system('date -u +%Y-%m-%d-%H%M-%S').'-'.system('uuidgen').'-vm-snapshot.ovf';
  print "ovf_file : $ovf_file\n";

  # 1) Use ssh to issue command to the source host to export an OVF
  #    appliance file from the machine.
  $export_cmd = "$from_cmd_prefix eval 'cd $from_path; mkdir $TFER_DIR; VBoxManage $source_id --option manifest,nomacs --output=${TFER_DIR}/${ovf_file}' $from_cmd_postfix";
  print "$export_cmd\n";
  if (system($export_cmd) === FALSE) {
    fwrite($STDERR, "Export command failed; bailing out. Command:\n\t$export_cmd\n");
    exit(1);
  }
    
  # 2) Copy the source directory to the target direcotry.
  # echo -e scp -r "${from_cmd_prefix}${from_path} ${to_cmd_prefix}${to_path}"
  # scp -r "${from_scp_prefix}${from_path} ${to_scp_prefix}${to_path}"

  # 3) Import the OVM to create new VM on the target.
  # echo -e $to_cmd_prefix eval "cd $to_path; VBoxManage import ${TFER_DIR}/${ovf_file}"
  # $to_cmd_prefix eval "cd $to_path; VBoxManage import ${TFER_DIR}/${ovf_file}"

  # 4) Remove the OVF file from the source.
  # echo -e $from_cmd_prefix eval "rm ${from_path}/${TFER_DIR}/${ovf_file}; rmdir ${from_path}/${TFER_DIR}"
  # $from_cmd_prefix eval "rm ${from_path}/${TFER_DIR}/${ovf_file}; rmdir ${from_path}/${TFER_DIR}"

  # 5) Set add a '.vagrant' DB to set up the newly created VM as a
  #    vagrant box.
  # echo -e $to_cmd_prefix eval "mkdir .vagrant/machines/default/virtualbox; echo $NEW_HOST_ID > .vagrant/machines/default/virtualbox/id"
  # $to_cmd_prefix eval "mkdir .vagrant/machines/default/virtualbox; echo $NEW_HOST_ID > .vagrant/machines/default/virtualbox/id"
}

exit();
?>
